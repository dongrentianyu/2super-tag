title: language/zh-Hans/TraitTag developer - create TraitTag

作为一个开发者，你会想要创建你自己的特质标签。

!! 一个特质标签有一个重要的字段`"schema"`。

<$whiteboard tiddler="HowToCreateTraitTagDiagram" readonly="yes" height="750px" />

* 规格（Schema）：[[JSON 规格（JSON Schema）|https://json-schema.org/]]，描述了一个表单将能填写哪些数据。
** 你可以参考 [[JSON 编辑器文档#JSON Schema 支持|https://github.com/json-editor/json-editor#json-schema-support]]了解表单的高级功能
** 一个需要遵守的规则是，JSON 规格是 `type: "object"` 的形式，并且只有 1 层，不能嵌套多层。
** 所有特征标签提供的所有属性都被合并到一个单一的 JSON 规格中，然后被用来显示超级标签表单

请看上面的链接来学习如何编写它们。你也可以从一些存在的[[特质标签例子|$:/SuperTag/TraitTag]]里学习用法。

!! 在线工具

* 在线免费的 JSON 规格编辑器
** [ext[bjdash/JSON-Schema-Builder|https://bjdash.github.io/JSON-Schema-Builder/]]
** [ext[hellosean1025/json-schema-visual-editor|https://hellosean1025.github.io/json-schema-visual-editor/]]
* 将生成的 JSON 规格序列化的工具
** [ext[json-stringify-online|https://jsonformatter.org/json-stringify-online]]

* 在创建特质标签条目时有用的太微插件
** [[wikilabs/field-editor - Side by side multiline field editor|https://tw-cpl.netlify.app/#Plugin_202203243721287]]

!! 如果想要自定义表单的话，参照下面的步骤

* 新建一个条目，建议以`$:/TraitTag`为前缀，类似`$:/TraitTag/xxx`，后面接上自定义的英文名，但不这样做也是可以的。
* 并加上标签`$:/SuperTag/TraitTag`，这是一定要的。
* 添加`schema`字段，这是一定要的，`schema` 字段即表单的规格（Schema）
** `schema`字段的内容需要参照以下格式

```
{
  "type": "object",
  "properties": {
    "completed": {
      "type": "boolean"
    },
    "completeType": {
      "type": "string",
      "enum": ["Delay", "AtTime", "InAdvance"]
    },
    "completedCount": {
      "type": "number"
    }
  },
  "required": ["completed"]
}
```

开头是一个花括号，里面有type和properties和required三个内容。type表明这是一个object对象内容。properties则是一些字段名称和对应的字段值。required是需要填写的。但只有新建条目时，同时确定了字段内容，才会在下面显示表单。类似下面代码里action-createtiddler中明确添加字段tmo_taskState和其值New，就会自动显示出表单来了。

```
<$button>
  <$action-createtiddler
    tags={{{ [{$:/plugins/linonetwo/intention-tower-knowledge-graph/Config/task-tag}addsuffix[ ]addsuffix<currentTiddler>] }}}
    tmo_taskState="New"
  >
    <$action-sendmessage $message="tm-edit-tiddler" $param=<<createTiddler-title>>/>
  </$action-createtiddler>
  {{$:/plugins/linonetwo/intention-tower-knowledge-graph/Images/Task}} 新任务
</$button>
```

properties里的值是`"completed": {"type": "boolean"},`的形式，字段名称用英文引号括起来，接着是一个英文冒号，然后是花括号，里面有写type属性，上面代码里是一个布尔值，显示在表单中的就会是true或false。常见的type值还有string字符串，number数字等。后面接一个英文的逗号，如果是最后一个就不用再写逗号了。如果选项是字符串类型，然后值是数组可供选择，那么可以采用enum，后面接一个中括号，值用英文引号括起来。

里面的内容可以有 title、description、type、format 等。`type` 类型有：string字符串、number数字、array数组、object对象、boolean布尔类型、integer整数类型。其中 number 和 integer 可以有最大值和最小值控制。在properties字段名称里与type同一层级的还有format，format可以是`color`颜色，也可以是`date`日期值，还可以是`email`邮件格式等。结合type和format可以实现大部分表单功能。具体可以通过[[JSON Schema|https://json-schema.org/]]文档来学习，或者从[[TraitTag Examples|$:/SuperTag/TraitTag]]示例中学习。一般的 JSON 规格是可以嵌套数据的，但因为在太微里，没有字段层级可以嵌套，所以也没有办法用表单输入嵌套数据。

JSON 规格自身也是以 JSON 格式保存的数据，格式非常严格，写错了逗号，漏写了逗号，或者写错了分号，漏写了分号都会出错，不能正常显示。你可以借助下面的网址来更好地编辑或者在 VSCode 等代码编辑器里打开，因为会有自动检查和自动格式化，能够很好地提示问题。

!! 翻译内容

!!! 翻译字段标题和描述等

参考[[$:/TraitTag/Color]]，你可以在规格的顶层加上 `lingo-base` 字段，例如 `"lingo-base": "language/",`：

<$codeblock code={{$:/TraitTag/Color!!schema}} />

其用法类似太微官方的 `lingo` 宏的用法。这样，你就可以在你的特质标签中使用翻译了。

在上面的例子里，实际使用的翻译条目是这样的：

# `lingo-base` 的值
#* 也就是 `language/`
# 后面拼上当前语言
#* 例如 `zh-Hans/`
# 然后拼上字段的内容
#* 例如 `"title": "TraitTag/Color/Title",` 这个字段
#* 拼上的就会是 `TraitTag/Color/Title`

最终得到 [[language/zh-Hans/TraitTag/Color/Title]] 这个翻译条目，其内容为

<$codeblock code={{language/zh-Hans/TraitTag/Color/Title}} />

!!! 翻译枚举类型字段的值

如果你的规格里有枚举类型的字段，例如 [[$:/TraitTag/ActionState]] 里的 `completeType` 字段：

<$codeblock code={{$:/TraitTag/ActionState!!schema}} />

你可以添加 `options` 字段，然后加上 `enum_titles` 字段，`enum_titles` 的值为一个数组，数组里的每个值对应 `enum` 里的每个值。数组里的值就是翻译条目的名称的一部分，例如 `TraitTag/ActionState/Delay`。

同上，最终会拼接得到 [[language/zh-Hans/TraitTag/ActionState/Delay]] 这个翻译条目，其内容为

<$codeblock code={{language/zh-Hans/TraitTag/ActionState/Delay}} />
